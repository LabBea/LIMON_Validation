}
# Initialize a list to store corrected counts for each column
corrected_counts_list <- base::list()
for (col_name in colnames(Obj$Counts)) {
# Prep        are the data for the current column
model_data <- cbind(Obj$SampleData[, c(Time, Subject)], Obj$Counts[, col_name])
colnames(model_data) <- c("timepoint", "subjectid", "asvcounts")
for (covariate in Covariates) {
model_data[[covariate]] <- Obj$SampleData[[covariate]]
}
# Fit the model
eq <- formula(base::paste("asvcounts", "~", model))
# Choose the appropriate function based on user's choice
if (use_zinb) {
if (prop.data) {
model_res <- NBZIMM::lme.zig(fixed = eq, random = ~1 | subjectid,
data = model_data, correlation = correlation, zi_fixed = ~1)
} else {
model_res <- NBZIMM::glmm.zinb(fixed = eq, offset = log(sum(asvcounts)),
random = ~1 | subjectid, data = model_data, correlation = correlation,
family = zi.negative.binomial(), zi_fixed = ~1)
}
} else {
model_res <- NBZIMM::glmm.nb(fixed = eq, offset = log(sum(asvcounts)),
random = ~1 | subjectid, data = model_data, correlation = correlation)
}
Obj[["equation"]] <- eq
Obj[["Model_res"]] <- model_res
# Store corrected counts
corrected_counts_list[[col_name]] <- resid(model_res)
}
Corrected_Counts <- as.data.frame(corrected_counts_list)
# Remove "label" attribute from each column
for (col in names(Corrected_Counts)) {
base::attr(Corrected_Counts[[col]], "label") <- NULL
}
# Set column names and row names
colnames(Corrected_Counts) <- colnames(Obj[["Counts"]])
rownames(Corrected_Counts) <- rownames(Obj[["Counts"]])
# Add one to scale the data for the appropriate distribution and save the object
#Corrected_Counts <- Corrected_Counts + 1
# scale to positive and make larger
Corrected_Counts <- Corrected_Counts + abs(min(Corrected_Counts)) #############################CHECK##############################
Corrected_Counts <- round(Corrected_Counts*10) #############################CHECK##############################
Obj$Corrected_Counts <- Corrected_Counts
# Store per timepoint
timepoints <- unique(Obj[["SampleData"]][[Time]])
Corrected_Counts_Timepoint <- base::list()
for (tp in timepoints) {
subset_sample_data <- Obj$SampleData[Obj$SampleData[[Time]] == tp, ]
timept_counts <- Obj$Corrected_Counts[row.names(Corrected_Counts) %in% row.names(subset_sample_data), ]
timept_counts_name <- base::paste0("Corrected_Counts_", tp)
Corrected_Counts_Timepoint[[timept_counts_name]] <- timept_counts
}
Obj$Corrected_Counts_Time <- Corrected_Counts_Timepoint
return(Obj)
}
LIMON_Edges_Networks2 <- function (Obj, threshold = 0.2, vertex.size = 3, vertex.label.cex = 8,
vertex.label.color = "black")
{
Edge_Table <- list()
for (i in seq_along(Obj[["CovMatrix_Time"]])) {
cov_matrix <- Obj[["CovMatrix_Time"]][[i]]
edge_table_name <- paste0("Edge_Table_", i)
diagonal_indices <- 1:nrow(cov_matrix)
cov_matrix[cbind(diagonal_indices, diagonal_indices)] <- 0
cov_matrix[lower.tri(cov_matrix)] <- 0
cov_matrix[abs(cov_matrix) < threshold] <- 0
adj <- as.data.frame(as.table(cov_matrix))
colnames(adj) <- c("Source", "Sink", "Edge_weight")
adj <- adj[adj$Edge_weight != 0, ]
Edge_Table[[edge_table_name]] <- adj
}
Network_Graphs <- list()
for (i in seq_along(Obj[["CovMatrix_Time"]])) {
cov_matrix <- Obj[["CovMatrix_Time"]][[i]]
diagonal_indices <- 1:nrow(cov_matrix)
cov_matrix[cbind(diagonal_indices, diagonal_indices)] <- 0
cov_matrix[abs(cov_matrix) < threshold] <- 0
adj_matrix <- sign(cov_matrix)
graph <- graph_from_adjacency_matrix(abs(adj_matrix), mode = "undirected")
edge_weights <- abs(cov_matrix)
normalized_edge_weights <- pmax(0.1, pmin(5, edge_weights))
# Create an empty vector to store edge colors
edge_colors <- rep(NA, ecount(graph))
# Identify the non-zero edges and assign colors
non_zero_edges <- which(adj_matrix != 0)
edge_colors[non_zero_edges] <- ifelse(cov_matrix[non_zero_edges] > 0,
"blue", "red")
edge_colors <- edge_colors[!is.na(edge_colors)]
isolated_nodes <- which(degree(graph) == 0)
graph <- delete.vertices(graph, isolated_nodes)
nodelab <- rownames(cov_matrix)
plot(graph, layout = layout_randomly(graph), edge.color = edge_colors,
edge.width = normalized_edge_weights * 3, vertex_labels = nodelab,
vertex.size = 3, vertex.label.cex = 0.8, vertex.label.color = "black",
main = paste0("Network Time", i))
Graphs_name <- paste0("Network_Time", i)
Network_Graphs[[Graphs_name]] <- graph
}
Obj[["Edge_Table"]] <- Edge_Table
Obj[["Network_Graphs"]] <- Network_Graphs
Obj
}
install.package(/Users/suzannealvernaz/Desktop/LIMON)
library(devtools)
install_local("/Users/suzannealvernaz/Desktop/LIMON")
library(LIMON)
LIMON_DistrFit
library(LIMON)
LIMON_DistrFit()
LIMON_DistrFit
library(tidyverse)
library(igraph)
library(NBZIMM)
library(SpiecEasi)
library(LIMON)
library(here)
library(lme4)
library(Matrix)
library(tscount)
library(patchwork)
library(MASS)
library(matrixcalc)
library(gridExtra)
library(devtools)
library(miaSim)
library(reshape2)
library(ggpubr)
library(broom)
library(ggnewscale)
library(coin)
# Load the simulated data
SimData <- read.csv(here("Data", "GLV_SimData", "Dataset_1","GLV_Cov.csv"))
SimData <- column_to_rownames(SimData, "X")
# Seperate out the metadata
meta_data <- SimData[,1:5]
meta_data$Time <- as.numeric(meta_data$Time)
meta_data$BMI <- as.numeric(meta_data$BMI)
meta_data$Age <- as.numeric(meta_data$Age)
limon_meta <- meta_data
# Count data
limon_counts <- as.matrix(SimData[,6:55])
# Ensure the rowname order is the same for the counts and metadata
limon_counts <- limon_counts[rownames(limon_meta),]
# Create the LIMON object
L_obj <- LIMON_Obj(Counts = limon_counts,
SampleData = limon_meta)
View(SimData)
# Plot only two
########################################################
# Pivot to long data
SimData_filt <- SimData[,c(1:6,31)]
count_long <- tidyr::pivot_longer(metacounts_filt, cols = starts_with("sp"), names_to = "Species")
# Plot only two
########################################################
# Pivot to long data
SimData_filt <- SimData[,c(1:6,31)]
count_long <- tidyr::pivot_longer(SimData_filt, cols = starts_with("sp"), names_to = "Species")
# Plot the data
count_long %>%
ggplot(aes(x = Time, y = value, colour = as.factor(ID),
group = as.factor(ID), linetype = as.factor(ID))) +
geom_line() +
geom_point() +
geom_jitter() +
ylab("Count") +
labs(linetype = "ID", color = "ID") +
facet_wrap(~ Species) +  # Create a panel for each species
theme_linedraw() +
theme(axis.text.x = element_text(family = "arial",color = "black", size = 14),
axis.text.y = element_text(family = "arial",color = "black", size = 14),
axis.title.x = element_text(family = "arial",color = "black", size = 14),
axis.title.y = element_text(family = "arial",color = "black", size = 14),
legend.position = "none",
strip.text = element_text(face = "bold", family = "arial", color = "white", size = 15))
# Plot only two
########################################################
# Pivot to long data
SimData_filt <- SimData[,c(1:6,31)]
count_long <- tidyr::pivot_longer(SimData_filt, cols = starts_with("sp"), names_to = "Species")
# Plot the data
count_long %>%
ggplot(aes(x = Time, y = value, colour = as.factor(Sex),
group = as.factor(Sex), linetype = as.factor(Sex))) +
geom_line() +
geom_point() +
geom_jitter() +
ylab("Count") +
labs(linetype = "Sex", color = "Sex") +
facet_wrap(~ Species) +  # Create a panel for each species
theme_linedraw() +
theme(axis.text.x = element_text(family = "arial",color = "black", size = 14),
axis.text.y = element_text(family = "arial",color = "black", size = 14),
axis.title.x = element_text(family = "arial",color = "black", size = 14),
axis.title.y = element_text(family = "arial",color = "black", size = 14),
legend.position = "none",
strip.text = element_text(face = "bold", family = "arial", color = "white", size = 15))
# Plot only two
########################################################
# Pivot to long data
SimData_filt <- SimData[,c(1:6,31)]
count_long <- tidyr::pivot_longer(SimData_filt, cols = starts_with("sp"), names_to = "Species")
# Plot the data
count_long %>%
ggplot(aes(x = Time, y = value, colour = as.factor(Sex),
group = as.factor(Sex), linetype = as.factor(Sex))) +
geom_line() +
geom_point() +
geom_jitter() +
ylab("Count") +
labs(linetype = "Sex", color = "Sex") +
facet_wrap(~ Species) +  # Create a panel for each species
theme_linedraw() +
theme(axis.text.x = element_text(family = "arial",color = "black", size = 14),
axis.text.y = element_text(family = "arial",color = "black", size = 14),
axis.title.x = element_text(family = "arial",color = "black", size = 14),
axis.title.y = element_text(family = "arial",color = "black", size = 14),
strip.text = element_text(face = "bold", family = "arial", color = "white", size = 15))
# Distribution of counts
########################################################
hist(as.matrix(limon_counts), breaks = 100, main = "Distribution of Counts", xlab = "Counts")
mean(limon_counts)
sd(limon_counts)
# Distribution of counts
########################################################
hist(as.matrix(limon_counts), breaks = 100, main = "Distribution of Counts", xlab = "Counts")
mean(limon_counts)
sd(limon_counts)
mean(limon_counts)
var(limon_counts)
variance(limon_counts)
# Distribution of counts
########################################################
hist(as.matrix(limon_counts), breaks = 100, main = "Distribution of Counts", xlab = "Counts")
mean(limon_counts)
(sd(limon_counts))^2
?LIMON_DistrFit
# Set seed
set.seed(12345)
# Number of cores to use
options(mc.cores = 4)
# Fit the distribution/remove covariates
#################################################################################
L_obj2 <- LIMON_DistrFit(Obj = L_obj,
Time = "Time",
Subject = "ID",
Covariates = c("Sex", "BMI", "Age"),
model = "Sex",
distribution = "GLMM.NB")
# Set seed
set.seed(12345)
# Number of cores to use
options(mc.cores = 4)
# Fit the distribution/remove covariates
#################################################################################
L_obj2 <- LIMON_DistrFit(Obj = L_obj,
Time = "Time",
Subject = "ID",
Covariates = c("Sex", "BMI", "Age"),
model = "Sex",
distribution = "GLMM.NB")
View(L_obj2)
View(L_obj2[["Corrected_Counts"]])
# Extract the clean data and merge with the metadata
########################################################
cleaned_counts <-  L_obj2[["Corrected_Counts"]]
cleaned_merged <- merge(limon_meta, cleaned_counts, by = 0)
View(cleaned_merged)
# Extract the clean data and merge with the metadata
########################################################
cleaned_counts <-  L_obj2[["Corrected_Counts"]]
cleaned_merged <- merge(limon_meta, cleaned_counts, by = 0)
# Plot only two
########################################################
# Pivot to long data
cleaned_filt <- cleaned_merged[,c(2:7,32)]
count_long <- tidyr::pivot_longer(cleaned_filt, cols = starts_with("sp"), names_to = "Species")
# Plot the data
count_long %>%
ggplot(aes(x = Time, y = value, colour = as.factor(Sex),
group = as.factor(Sex), linetype = as.factor(Sex))) +
geom_line() +
geom_point() +
geom_jitter() +
ylab("Count") +
labs(linetype = "Sex", color = "Sex") +
facet_wrap(~ Species) +  # Create a panel for each species
theme_linedraw() +
theme(axis.text.x = element_text(family = "arial",color = "black", size = 14),
axis.text.y = element_text(family = "arial",color = "black", size = 14),
axis.title.x = element_text(family = "arial",color = "black", size = 14),
axis.title.y = element_text(family = "arial",color = "black", size = 14),
strip.text = element_text(face = "bold", family = "arial", color = "white", size = 15))
# Set seed
set.seed(12345)
# Fit the distribution/remove covariates
L_obj2 <- LIMON_DistrFit(Obj = L_obj,
Time = "Time",
Subject = "ID",
Covariates = c("Sex", "BMI", "Age"),
model = "Sex",
distribution = "LMM")
# Extract the clean data and merge with the metadata
########################################################
cleaned_counts <-  L_obj2[["Corrected_Counts"]]
cleaned_merged <- merge(limon_meta, cleaned_counts, by = 0)
# Plot only two
########################################################
# Pivot to long data
cleaned_filt <- cleaned_merged[,c(2:7,32)]
count_long <- tidyr::pivot_longer(cleaned_filt, cols = starts_with("sp"), names_to = "Species")
# Plot the data
count_long %>%
ggplot(aes(x = Time, y = value, colour = as.factor(Sex),
group = as.factor(Sex), linetype = as.factor(Sex))) +
geom_line() +
geom_point() +
geom_jitter() +
ylab("Count") +
labs(linetype = "Sex", color = "Sex") +
facet_wrap(~ Species) +  # Create a panel for each species
theme_linedraw() +
theme(axis.text.x = element_text(family = "arial",color = "black", size = 14),
axis.text.y = element_text(family = "arial",color = "black", size = 14),
axis.title.x = element_text(family = "arial",color = "black", size = 14),
axis.title.y = element_text(family = "arial",color = "black", size = 14),
strip.text = element_text(face = "bold", family = "arial", color = "white", size = 15))
ggplot(LIMON_SampleData, aes(x = Time, y =DegreeCentrality)) +
geom_point(aes(fill=as.factor(ID), color=as.factor(ID))) +
geom_jitter(aes(fill=as.factor(ID), color=as.factor(ID))) +
theme_classic() +
ylab("Degree Centrality") +
scale_x_continuous(limits = c(0.5, 11), breaks = 1:10)  +
theme(axis.text.x = element_text(family = "arial",color = "black", size = 14),
axis.text.y = element_text(family = "arial",color = "black", size = 14),
axis.title.x = element_text(family = "arial",color = "black", size = 14),
axis.title.y = element_text(family = "arial",color = "black", size = 14))
library(tidyverse)
library(igraph)
library(NBZIMM)
library(nlme)
library(SpiecEasi)
library(LIMON)
library(here)
library(lme4)
library(Matrix)
library(tscount)
library(patchwork)
library(MASS)
library(matrixcalc)
library(gridExtra)
library(devtools)
library(miaSim)
library(reshape2)
library(ggpubr)
library(broom)
library(ggnewscale)
library(coin)
# Load the simulated data
SimData <- read.csv(here("Data", "GLV_SimData", "Dataset_1","GLV_Cov.csv"))
SimData <- column_to_rownames(SimData, "X")
# Seperate out the metadata
meta_data <- SimData[,1:5]
meta_data$Time <- as.numeric(meta_data$Time)
meta_data$BMI <- as.numeric(meta_data$BMI)
meta_data$Age <- as.numeric(meta_data$Age)
limon_meta <- meta_data
# Count data
limon_counts <- as.matrix(SimData[,6:55])
# Ensure the rowname order is the same for the counts and metadata
limon_counts <- limon_counts[rownames(limon_meta),]
# Create the LIMON object
L_obj <- LIMON_Obj(Counts = limon_counts,
SampleData = limon_meta)
# Plot only two Species
########################################################
# Pivot to long data
SimData_filt <- SimData[,c(1:6,31)]
count_long <- tidyr::pivot_longer(SimData_filt, cols = starts_with("sp"), names_to = "Species")
# Plot the data
count_long %>%
ggplot(aes(x = Time, y = value, colour = as.factor(Sex),
group = as.factor(Sex), linetype = as.factor(Sex))) +
geom_line() +
geom_point() +
geom_jitter() +
ylab("Count") +
labs(linetype = "Sex", color = "Sex") +
facet_wrap(~ Species) +  # Create a panel for each species
theme_linedraw() +
theme(axis.text.x = element_text(family = "arial",color = "black", size = 14),
axis.text.y = element_text(family = "arial",color = "black", size = 14),
axis.title.x = element_text(family = "arial",color = "black", size = 14),
axis.title.y = element_text(family = "arial",color = "black", size = 14),
strip.text = element_text(face = "bold", family = "arial", color = "white", size = 15))
# Distribution of counts
hist(as.matrix(limon_counts), breaks = 100, main = "Distribution of Counts", xlab = "Counts")
# Set seed
set.seed(12345)
# Fit the distribution/remove covariates
L_obj2 <- LIMON_DistrFit(Obj = L_obj,
Time = "Time",
Subject = "ID",
Covariates = c("Sex", "BMI", "Age"),
model = "Sex",
distribution = "LMM")
# Extract the clean data and merge with the metadata
########################################################
cleaned_counts <-  L_obj2[["Corrected_Counts"]]
cleaned_merged <- merge(limon_meta, cleaned_counts, by = 0)
# Plot only two
########################################################
# Pivot to long data
cleaned_filt <- cleaned_merged[,c(2:7,32)]
count_long <- tidyr::pivot_longer(cleaned_filt, cols = starts_with("sp"), names_to = "Species")
# Plot the data
count_long %>%
ggplot(aes(x = Time, y = value, colour = as.factor(Sex),
group = as.factor(Sex), linetype = as.factor(Sex))) +
geom_line() +
geom_point() +
geom_jitter() +
ylab("Count") +
labs(linetype = "Sex", color = "Sex") +
facet_wrap(~ Species) +  # Create a panel for each species
theme_linedraw() +
theme(axis.text.x = element_text(family = "arial",color = "black", size = 14),
axis.text.y = element_text(family = "arial",color = "black", size = 14),
axis.title.x = element_text(family = "arial",color = "black", size = 14),
axis.title.y = element_text(family = "arial",color = "black", size = 14),
strip.text = element_text(face = "bold", family = "arial", color = "white", size = 15))
set.seed(12345)
# SPIEC-EASI per time
# Set seed
pseed <- list(rep.num=50, seed=10010)
#infer network
L_obj3 <- LIMON_NetInf_Time(Obj = L_obj2,
method = "glasso",
sel.criterion = "bstars",
lambda.min.ratio = 0.01,
pulsar.select=TRUE,
pulsar.params=pseed,
nlambda = 200)
# Print Networks
L_obj4 <- LIMON_Edges_Networks(L_obj3, threshold = 0.02, vertex.size = 3,
vertex.label.cex = 8, vertex.label.color = "black")
# Set seed
set.seed(12345)
pseed <- list(rep.num=50, seed=10010)
# individual Networks
L_obj6 <- LIMON_IndNet(Obj = L_obj4, method = "glasso",
sel.criterion = "bstars",
lambda.min.ratio = 0.01,
pulsar.params=pseed,
nlambda = 200)
# Save the object
#saveRDS(L_obj6, here("Output","LIMON_obj", "Dataset1_Lionness.rds"))
# Option to read back in the object
#L_obj6 <- readRDS(here("Output","LIMON_obj", "Dataset1_Lionness.rds"))
L_obj7 <- LIMON_IndEdges(L_obj6, threshold = 0.02)
L_obj8 <- LIMON_Centralities(L_obj7, threshold = 0.02)
ggplot(LIMON_SampleData, aes(x = Time, y =DegreeCentrality)) +
geom_point(aes(fill=as.factor(ID), color=as.factor(ID))) +
geom_jitter(aes(fill=as.factor(ID), color=as.factor(ID))) +
theme_classic() +
ylab("Degree Centrality") +
scale_x_continuous(limits = c(0.5, 11), breaks = 1:10)  +
theme(axis.text.x = element_text(family = "arial",color = "black", size = 14),
axis.text.y = element_text(family = "arial",color = "black", size = 14),
axis.title.x = element_text(family = "arial",color = "black", size = 14),
axis.title.y = element_text(family = "arial",color = "black", size = 14))
ggplot(LIMON_SampleData, aes(x = Time, y =ClosenessCentrality)) +
geom_point(aes(fill=as.factor(ID), color=as.factor(ID))) +
geom_jitter(aes(fill=as.factor(ID), color=as.factor(ID))) +
theme_classic() +
ylab("Closeness Centrality") +
scale_x_continuous(limits = c(0.5, 11), breaks = 1:10)  +
theme(axis.text.x = element_text(family = "arial",color = "black", size = 14),
axis.text.y = element_text(family = "arial",color = "black", size = 14),
axis.title.x = element_text(family = "arial",color = "black", size = 14),
axis.title.y = element_text(family = "arial",color = "black", size = 14))
ggplot(LIMON_SampleData, aes(x = Time, y =BetweennessCentrality)) +
geom_point(aes(fill=as.factor(ID), color=as.factor(ID))) +
geom_jitter(aes(fill=as.factor(ID), color=as.factor(ID))) +
theme_classic() +
ylab("Betweenness Centrality") +
scale_x_continuous(limits = c(0.5, 11), breaks = 1:10)  +
theme(axis.text.x = element_text(family = "arial",color = "black", size = 14),
axis.text.y = element_text(family = "arial",color = "black", size = 14),
axis.title.x = element_text(family = "arial",color = "black", size = 14),
axis.title.y = element_text(family = "arial",color = "black", size = 14))
ggplot(LIMON_SampleData, aes(x = Time, y =EigenCentrality)) +
geom_point(aes(fill=as.factor(ID), color=as.factor(ID))) +
geom_jitter(aes(fill=as.factor(ID), color=as.factor(ID))) +
theme_classic() +
ylab("Eigen Centrality") +
scale_x_continuous(limits = c(0.5, 11), breaks = 1:10)  +
theme(axis.text.x = element_text(family = "arial",color = "black", size = 14),
axis.text.y = element_text(family = "arial",color = "black", size = 14),
axis.title.x = element_text(family = "arial",color = "black", size = 14),
axis.title.y = element_text(family = "arial",color = "black", size = 14))
ggplot(LIMON_SampleData, aes(x = Time, y =Communities)) +
geom_point(aes(fill=as.factor(ID), color=as.factor(ID))) +
geom_jitter(aes(fill=as.factor(ID), color=as.factor(ID))) +
theme_classic() +
ylab("Communities") +
scale_x_continuous(limits = c(0.5, 11), breaks = 1:10)  +
theme(axis.text.x = element_text(family = "arial",color = "black", size = 14),
axis.text.y = element_text(family = "arial",color = "black", size = 14),
axis.title.x = element_text(family = "arial",color = "black", size = 14),
axis.title.y = element_text(family = "arial",color = "black", size = 14))
